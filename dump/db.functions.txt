// store multiple docs at a time adding prefix
export const batchPut = function(docs, prefix) {
    return new Promise((resolve, reject) => {
        docs = docs.map(doc => {
            // adding custom prefix
            doc._id = `${prefix}:${doc._id || v4()}`
            return doc
        });
        localFcDb.bulkDocs(docs)
            .then(() => resolve())
            .catch((err) => reject(err))
    })
}

// return list of docs whose id starts with passed prefix
export const getDocsStartsWith = function(prefix) {
    return new Promise((resolve, reject) => {
        localFcDb.find({
            selector: {
                _id: { $regex: new RegExp(`^${prefix}:`)}
            }
        })
        .then((result) => {
            const docs = result.docs.filter(doc => {
                // removing pouch revision
                delete doc._rev
                // removing custom added prefix
                doc._id = doc._id.substring(prefix.length + 1)
                return doc;
            })
            resolve(docs);
        })
        .catch((err) => reject(err))
    })
}

const setDocs = async function(docs, prefix) {
    if (!Array.isArray(docs)) return false;
    try {
        await batchPut(docs, prefix)
        return true;
    } catch(err) {
        console.log(err)
        return false;
    }
}

const getDocs = async function(prefix) {
    try {
        const friends = await getDocsStartsWith(prefix)
        return friends;
    } catch(err) {
        console.log(err)
        return null
    }
}